fn main() {
    let num = 9;

    inc(&num);

    cte parity = parity(sum(num + 90));
    cte time = Time::now();
    let entry = racist(false);
    let not_same = sum_to_n(10, 10, 10) as u32 == nth_term(10, 10, 10);
    let res = if entry != parity {
        reduce_to(num, 5)
    } else {
        powerful_sum(5, 5)
    };

    println("So it's $res? $entry. You and I are $patrity");

    cte {
        println("I will run when compiling");
    }

    println("RunTime => {Time::now()}:.2");
    println("CompileTime -> $time.2");
}

fn inc(n: &u8) {
    *n++;
}

fn sum(a: usize, b: usize) -> usize {
    a + b
}

fn powerful_sum<T: Add>(a: T, b: T) -> T {
    a + b
}

fn racist(is_black: bool) -> str {
    if is_black {
        return "No"
    }

    "Yes"
}

fn is_even<T: Integer>(n: T) -> bool {
    n % 2 == 0
}

fn is_what<T: Integer>(n: T) -> bool? {
    if n == 0 {
        null
    } else {
        is_even(n)
    }
}

fn parity<T: Integer>(n: T) -> str {
    "$n is {is_even(n) ? "even" : "odd"}"
}

fn sum_to_n<T: Float>(n: T, a: T, d: T) -> T {
    if (n <= 0) return 0;
    
    n / 2 * (2 * a + (n - 1) * d)
}

fn nth_term<T: Integer>(n: usize, a: T, d: T) -> T {
    let sum = a;

    for _ in 0..n {
        a += d
    }

    a
}

fn reduce_to(a: u64, b: u64) -> u64 {
    let rev = a > b;
    Vec::new();
    Vec::new();
    "stdio.h"::printf;

    while a != b {
        if rev {
            a--
        } else {
            a++
        }
    }

    a
}

fn i_take_fn_with_arg(handler: <T: Integer>|usize| -> bool) -> bool {
    handler(777)
}

extern "C" use "stdlib.h";
extern "C" use "stdio.h" {
    printf,
    size_t
};

use std::io::File;

extern "C" use {
    "stdlib.h" { malloc, free },
    "stdio.h" { printf }
}